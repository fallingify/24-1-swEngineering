pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                // 빌드 단계의 실제 빌드 명령어
                sh 'echo "Building the project..."'
            }
        }
        stage('Test') {
            steps {
                // 테스트 단계의 실제 테스트 명령어
                sh 'echo "Running tests..."'
                // JUnit 5 테스트 실행을 위한 classpath 설정
             	def classpath = "classes:lib/*:/Applications/Eclipse\\ 2.app/Contents/Eclipse/plugins/junit-platform-console-standalone-1.7.1-all.jar"
            	// JUnit 5 테스트 실행
            	sh "java -cp ${classpath} org.junit.platform.console.ConsoleLauncher --scan-classpath > test_results.txt"
             
           
            }
        }
        stage('Deploy') {
            steps {
                // 배포 단계의 실제 배포 명령어
                sh 'echo "Deploying the project..."'
            }
        }
    }

    post {
    	always {
			// 테스트 결과 파일을 저장하기 위해 아카이브
			archiveArtifacts 'test_results.txt'
		}
        success {
            // 빌드가 성공하면 .txt 파일을 작성하는 단계
            script {
                def message = 'Build succeeded'
                writeFile file: 'test_results.txt', text: message
                archiveArtifacts artifacts: 'test_results.txt'
            }
        }
        failure {
            // 빌드가 실패하면 .txt 파일을 작성하는 단계
            script {
                def message = 'Build failed'
                writeFile file: 'test_results.txt', text: message
                archiveArtifacts artifacts: 'test_results.txt'
            }
        }
    }
}
